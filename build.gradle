plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'sonar-jacoco'
    id "org.sonarqube" version "2.7"
}

group = 'com.dgf'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

apply plugin: 'jacoco'
apply plugin: 'sonar-jacoco'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://oss.jfrog.org/artifactory/oss-snapshot-local/' } //todo needed for swagger SNAPSHOT
}

dependencies {
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-webflux'
    implementation group: 'org.springframework.session', name: 'spring-session-core'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
}

test {
    useJUnitPlatform()
}

//task junit(type: Test) {
//    description = "Runs JUnit 4 and JUnit Jupiter tests."
//    useJUnitPlatform {
//        excludeTags "failing-test-case"
//    }
//    include(["**/*Tests.class", "**/*Test.class"])
//    exclude(["**/testng/**/*.*"])
//    systemProperty("testGroups", project.properties.get("testGroups"))
//    // Java Util Logging for the JUnit Platform.
//    // systemProperty("java.util.logging.manager", "org.apache.logging.log4j.jul.LogManager")
//}

jacocoTestReport {
    getAdditionalSourceDirs().setFrom(files(sourceSets.main.allSource.srcDirs))
    getSourceDirectories().setFrom(files(sourceSets.main.allSource.srcDirs))
    getClassDirectories().setFrom(files(sourceSets.main.output))
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}

task jacocoRootReport(type: JacocoReport) {
    dependsOn = subprojects.test
    getAdditionalSourceDirs().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getSourceDirectories().setFrom(files(subprojects.sourceSets.main.allSource.srcDirs))
    getClassDirectories().setFrom(files(subprojects.sourceSets.main.output))
    getExecutionData().setFrom(files(subprojects.jacocoTestReport.executionData))
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
}
